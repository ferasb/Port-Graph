//// Created by mario barbara//#ifndef PORJECT_OFF_EX_MST_H#define PORJECT_OFF_EX_MST_H/**** MST Example ****/#include <iostream>#include "PortGraph.h"/// EX : Drawing-MST , Input and Outputdouble wf(const edge_id id, const double e){    return e;}void PG_MST(){    ostringstream s;    s << "Minimum Spanning Tree Example " << endl;    s << "Attributes : < Color ,Color ,Double >" << endl ;    fprintf(stdout, s.str().c_str());    typedef enum{blue,red,green,white} Color;    int n_vertex = 4;    vport_id id00 = vport_id(0, 0);    vport_id id01 = vport_id(0, 1);    vport_id id10 = vport_id(1, 0);    vport_id id11 = vport_id(1, 1);    vport_id id20 = vport_id(2, 0);    vport_id id21 = vport_id(2, 1);    vport_id id30 = vport_id(3, 0);    vport_id id31 = vport_id(3, 1);    vector<int> ports_num({2,2,2,2});    vector<edge_id> edges_list = {edge_id(id00,id21),                                  edge_id(id00,id01),                                  edge_id(id21,id10),                                  edge_id(id10,id11),                                  edge_id(id10,id01),                                  edge_id(id11,id20),                                  edge_id(id11,id30),                                  edge_id(id30,id20),                                  edge_id(id20,id31)};    vector<double> edgeAttr = {1,3,0.5,1,1,7,1.5,3,1};    vector<Color> verAttr = {white,white,white,white,white};    vector<vector<Color>> portAttr = {{red,blue},{red,blue},{red,blue},{red,blue}};    /// Output : weight  == 9 and mst is pg without e : 00->01 and e : 11->20    PortGraph<Color, Color, double > pg = PortGraph<Color, Color, double >(n_vertex, ports_num, edges_list,verAttr,portAttr,edgeAttr);    auto output = pg.Kruskal(wf);    ostringstream s_inner;    s_inner << "The weight of MST for Port Graph is : " << output.first <<endl;    fprintf(stdout, s_inner.str().c_str());    output.second.Print();    output.second.PrintEdges();}#endif