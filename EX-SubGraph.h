//// Created by mario barbara//#ifndef PORJECT_OFF_EX_SUBGRAPH_H#define PORJECT_OFF_EX_SUBGRAPH_H/**** SubGraph Example ****/#include <iostream>#include "PortGraph.h"/// EX : SubGraph-subGraph\Graphvoid PG_SubGraph(){    ostringstream s;    s << "Minimum Spanning Tree Example " << endl;    s << "Attributes : < Color ,Color ,Double >" << endl ;    fprintf(stderr, s.str().c_str());    typedef enum{blue,red,green,white,grey,yellow} Color;    int n_vertex = 3;    //sub graph    vport_id id00 = vport_id(0, 0);    vport_id id10 = vport_id(1, 0);    vport_id id11 = vport_id(1, 1);    vport_id id20 = vport_id(2, 0);    //graph    vport_id id21 = vport_id(2, 1);    vport_id id22 = vport_id(2, 2);    vport_id id30 = vport_id(3, 0);    vport_id id31 = vport_id(3, 1);    vport_id id40 = vport_id(4, 0);    vport_id id41 = vport_id(4, 1);    vector<int> ports_num({1,2,1});    vector<edge_id> edges_list = {edge_id(id10,id20),                                  edge_id(id20,id00),                                  edge_id(id00,id11)};    vector<std::string> edgeAttr = {"subGraph","subGraph","subGraph"};    vector<Color> verAttr = {yellow,red,grey};    vector<vector<Color>> portAttr = {{green},{blue,blue},{white}};    /// Output : subGraph    PortGraph<Color, Color, std::string > sub_pg = PortGraph<Color, Color, std::string >(n_vertex, ports_num, edges_list,verAttr,portAttr,edgeAttr);    ostringstream s_inner1;    s_inner1 << "The following graph : "  <<endl;    fprintf(stderr, s_inner1.str().c_str());    sub_pg.Print();    sub_pg.PrintEdges();    //pg    auto pg = sub_pg;    pg.addVport(id00,yellow,blue);    pg.addVport(id21,grey,yellow);    pg.addVport(id22,grey,white);    pg.addVport(id30,green,yellow);    pg.addVport(id31,green,blue);    pg.addVport(id40,blue,green);    pg.addVport(id41,blue,yellow);    pg.addEdge(edge_id(id00,id31),"graph");    pg.addEdge(edge_id(id30,id22),"graph");    pg.addEdge(edge_id(id22,id40),"graph");    pg.addEdge(edge_id(id41,id21),"graph");    ostringstream s_inner2;    //true    std::string res1 = sub_pg.isSubGraph(pg, true, true, true) ? "IS" : "ISN'T";    s_inner2 << res1 + " sub graph for the following graph considering attributes and";    fprintf(stderr, s_inner2.str().c_str());    ostringstream s_inner3;    //false    std::string res2 = sub_pg.isSubGraph(pg, false, false, false) ? "IS" : "ISN'T";    s_inner3 << res2 + " sub graph for the following graph considering attributes : "  <<endl;    fprintf(stderr, s_inner3.str().c_str());    pg.Print();    pg.PrintEdges();}#endif