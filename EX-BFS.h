//// Created by mario barbara//#ifndef PORJECT_OFF_EX_BFS_H#define PORJECT_OFF_EX_BFS_H/**** BFS Example ****/#include <iostream>#include "PortGraph.h"/// EX : Drawing-DFS/BFSvoid PG_BFS(){    ostringstream s1;    s1 << "Attributes : < Color ,Color ,String >" << endl ;    s1 << "Vport BFS Example " << endl;    fprintf(stdout, s1.str().c_str());    typedef enum{blue,red,green,white} Color;    int n_vertex = 5;    vport_id id00 = vport_id(0, 0);    vport_id id01 = vport_id(0, 1);    vport_id id02 = vport_id(0, 2);    vport_id id10 = vport_id(1, 0);    vport_id id11 = vport_id(1, 1);    vport_id id20 = vport_id(2, 0);    vport_id id21 = vport_id(2, 1);    vport_id id30 = vport_id(3, 0);    vport_id id40 = vport_id(4, 0);    vport_id id41 = vport_id(4, 1);    vector<int> ports_num({3,2,2,1,2});    vector<edge_id> edges_list({                                       edge_id(id00,id11),                                       edge_id(id11,id30),                                       edge_id(id11,id40),                                       edge_id(id00,id20),                                       edge_id(id01,id21),                                       edge_id(id21,id41)});    vector<Color> verAttr = {white,white,white,white,white};    vector<vector<Color>> portAttr = {            {red,blue,green},            {green,red},            {red,green},            {red},            {red,blue}    };    vector<std::string> edgeAttr = {            "V0:P0 -> V1:P1",            "V1:P1 -> V3:P0",            "V1:P1 -> V4:P0",            "V0:P0 -> V2:P0",            "V0:P1 -> V2:P1",            "V2:P1 -> V4:P1",    };    /// Output :(0,0)->(1,1)->(2,0)->(3,0)->(4,0)->(0,1)->(2,1)->(4,1)->(0,2)->(1,0)    PortGraph<Color, Color, std::string> pg = PortGraph<Color, Color, std::string>(n_vertex, ports_num, edges_list,verAttr,portAttr,edgeAttr);    for(auto it = BFSIterator<Color, Color, std::string>(&pg,id00);it != pg.vportEnd();it++) {        ostringstream s_inner;        s_inner << "(" <<(*it).first << "," << (*it).second << ")" << endl;        fprintf(stdout, s_inner.str().c_str());    }    /// Output : 0 -> 1 -> 2 -> 3 -> 4    ostringstream s2;    s2 << "Vertex BFS Example " << endl;    fprintf(stdout, s2.str().c_str());    for(auto it = BFSVertexIterator<Color, Color, std::string>(&pg,0);it != pg.vertexEnd();it++) {        ostringstream s_inner;        s_inner << (*it) << endl;        fprintf(stdout, s_inner.str().c_str());    }}#endif