//// Created by mario barbara//#ifndef PORJECT_OFF_EX_INDUCEDGRAPH_H#define PORJECT_OFF_EX_INDUCEDGRAPH_H/**** InducedGraph Example ****/#include <iostream>#include "PortGraph.h"/// EX : InducedGraph-Input and Output-{Vertex,Vport,Edge}typedef enum{blue,red,green,white,yellow} Color;bool predVertex(const int id,Color att){    return id%2 ==0 || id > 3;}bool predVport(const vport_id id,Color att_vertex,Color att_port){    return att_vertex == yellow;}bool predEdge(const edge_id id,std::string att){    auto x = split(att,"->");    return x[1] == "yellow)";}void PG_InducedGraph(){    ostringstream s;    s << "InducedGraph Example " << endl;    s << "Attributes : < Color ,Color ,string >" << endl ;    fprintf(stderr, s.str().c_str());    int n_vertex = 7;    vport_id id00 = vport_id(0, 0);    vport_id id10 = vport_id(1, 0);    vport_id id20 = vport_id(2, 0);    vport_id id30 = vport_id(3, 0);    vport_id id31 = vport_id(3, 1);    vport_id id32 = vport_id(3, 2);    vport_id id40 = vport_id(4, 0);    vport_id id41 = vport_id(4, 1);    vport_id id42 = vport_id(4, 2);    vport_id id50 = vport_id(5, 0);    vport_id id51 = vport_id(5, 1);    vport_id id60 = vport_id(6, 0);    vport_id id61 = vport_id(6, 1);    vector<int> ports_num({1,1,1,3,3,2,2});    vector<edge_id> edges_list = {                                    edge_id(id00,id60),                                    edge_id(id00,id50),                                    edge_id(id61,id10),                                    edge_id(id10,id41),                                    edge_id(id42,id20),                                    edge_id(id40,id31),                                    edge_id(id32,id20),                                    edge_id(id51,id30)    };    vector<std::string> edgeAttr = {                                            "(white->yellow)",                                            "(white->white)",                                           "(white->yellow)",                                            "(yellow->white)",                                           "(white->yellow)",                                            "(yellow->yellow)",                                            "(white->yellow)",                                            "(yellow->white)"    };    vector<Color> verAttr = {blue,red,blue,red,blue,green,green};    vector<vector<Color>> portAttr = {{white},{yellow},{yellow},{white,yellow,white},{yellow,white,white},{white,yellow},{yellow,white}};    PortGraph<Color, Color, std::string > pg = PortGraph<Color, Color, std::string >(n_vertex, ports_num, edges_list,verAttr,portAttr,edgeAttr);    /// Output : pg without the 'red' vertecies with id 1 and 3    auto output_vertex = pg.inducedGraph(predVertex);    ostringstream s_inner1;    s_inner1 << "The Vertex InducedGraph without 'red vertex' attribute is : " << endl;    fprintf(stderr, s_inner1.str().c_str());    output_vertex.Print();    output_vertex.PrintEdges();    /// Output : pg with only yellow ports    auto output_vport = pg.inducedGraph(predVport);    ostringstream s_inner2;    s_inner2 << "The Vport InducedGraph with only 'yellow port' attribute is : " << endl;    fprintf(stderr, s_inner2.str().c_str());    output_vport.Print();    output_vport.PrintEdges();    /// Output : pg with edges that ends with 'yellow' ports    auto output_edge = pg.inducedGraph(predEdge);    ostringstream s_inner3;    s_inner3 << "The Edge InducedGraph with outGoing edges to 'yellow ports' attribute is : " << endl;    fprintf(stderr, s_inner3.str().c_str());    output_edge.Print();    output_edge.PrintEdges();}#endif